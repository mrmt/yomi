#!/usr/bin/env perl

=head1 NAME

yomi - describe characters one by one in Japanese

=head1 SYNOPSIS

  yomi [-h] [--help] STRING

  Options:
  --help, -h                  show this help
  --verbose, -v               more verbose output

=cut

use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use Pod::Usage;
use feature 'say';
use strict;
use warnings;
use utf8;

binmode(STDOUT, ':utf8:');

my $yomi = {
            ' ' => 'スペース',
            '!' => 'びっくり',
            '"' => 'ダブルクォート',
            '#' => 'シャープ',
            '$' => 'ドル',
            '%' => 'パーセント',
            '&' => 'アンド',
            q(') => 'クォート',
            '(' => '左カッコ',
            ')' => '右カッコ',
            '*' => 'アスタリスク',
            '+' => 'プラス',
            ',' => 'カンマ',
            '-' => 'マイナス',
            '.' => 'ピリオド',
            '/' => 'スラッシュ',
            '0' => 'ぜろ',
            '1' => 'いち',
            '2' => 'に',
            '3' => 'さん',
            '4' => 'よん',
            '5' => 'ご',
            '6' => 'ろく',
            '7' => 'なな',
            '8' => 'はち',
            '9' => 'きゅう',
            ':' => 'コロン',
            ';' => 'セミコロン',
            '<' => '不等号',
            '=' => 'イコール',
            '>' => '不等号',
            '?' => 'はてな',
            '@' => 'アット',
            '[' => '左ブラケット',
            '\\' => 'バックスラッシュ',
            ']' => '右ブラケット',
            '^' => 'アクサンシルコンフレックス',
            '_' => 'アンダーライン',
            '`' => 'バッククォート',
            'a' => 'エー',
            'b' => 'ビー',
            'c' => 'シー',
            'd' => 'ディー',
            'e' => 'イー',
            'f' => 'エフ',
            'g' => 'ジー',
            'h' => 'エイチ',
            'i' => 'アイ',
            'j' => 'ジェイ',
            'k' => 'ケー',
            'l' => 'エル',
            'm' => 'エム',
            'n' => 'エヌ',
            'o' => 'オー',
            'p' => 'ピー',
            'q' => 'キュー',
            'r' => 'アール',
            's' => 'エス',
            't' => 'ティー',
            'u' => 'ユー',
            'v' => 'ブイ',
            'w' => 'ダブリュー',
            'x' => 'エックス',
            'y' => 'ワイ',
            'z' => 'ゼット',
            '{' => '左中カッコ',
            '|' => '縦棒',
            '}' => '右中カッコ',
            '~' => 'ティルデ'
           };

my $option_help;
my $option_verbose;

GetOptions(
    'help|h' => \$option_help,
    'verbose|v' => \$option_verbose
) or pod2usage();

pod2usage() if $option_help;
pod2usage() unless scalar(@ARGV) == 1;

my $string = $ARGV[0];
my @desc;

for my $char (split(//, $string)){
    if($option_verbose){
        my $desc;
        if($char =~ /[A-Z]/){
            $desc .= '大文字';
        }elsif($char =~ /[a-z]/){
            $desc .= '小文字';
        }elsif($char =~ /[0-9]/){
            $desc .= '数字';
        }
        $desc .= $yomi->{lc($char)};
        push @desc, $desc;
    }else{
        push @desc, $yomi->{lc($char)};
    }
}

say join(' ', @desc);

__END__
